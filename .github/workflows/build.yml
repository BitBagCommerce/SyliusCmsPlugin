name: Build
on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request: ~
  release:
    types: [ created ]
  schedule:
    - cron: "0 1 * * 6"
  workflow_dispatch: ~

jobs:
  tests:
    runs-on: ubuntu-latest

    name: "Sylius ${{ matrix.sylius }}, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mysql }}, Trix ${{ matrix.trix }}"

    strategy:
      fail-fast: false
      matrix:
        php: ["8.1", "8.2", "8.3"]
        symfony: ["^5.4", "^6.4"]
        sylius: ["~1.13.0", "~1.14.0"]
        node: ["20.x"]
        mysql: ["8.0"]
        trix: [false, true]

        exclude:
          - sylius: "~1.14.0"
            symfony: ^5.4

    env:
      APP_ENV: test
      DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?serverVersion=${{ matrix.mysql }}"

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: intl
          tools: flex, symfony
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "${{ matrix.node }}"

      - name: Shutdown default MySQL
        run: sudo service mysql stop

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: "${{ matrix.mysql }}"
          mysql root password: "root"

      - name: Output PHP version for Symfony CLI
        run: php -v | head -n 1 | awk '{ print $2 }' > .php-version

      - name: Install certificates
        run: symfony server:ca:install

      - name: Run Chrome Headless
        run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --allow-insecure-localhost --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' http://127.0.0.1 > /dev/null 2>&1 &

      - name: Run webserver
        run: (cd tests/Application && symfony server:start --port=8080 --dir=public --daemon)

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Restrict Sylius version
        if: matrix.sylius != ''
        run: composer require "sylius/sylius:${{ matrix.sylius }}" --no-update --no-scripts --no-interaction

      - name: Install PHP dependencies
        run: composer install --no-interaction
        env:
          SYMFONY_REQUIRE: ${{ matrix.symfony }}

      - name: Install Behat driver
        run: vendor/bin/bdi browser:google-chrome drivers

      - name: Get Yarn cache directory
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-yarn-

      - name: Install JS dependencies
        run: |
          cd tests/Application
          if [ "${{ matrix.trix }}" = "true" ]; then
            yarn add trix
            sed -i "s/wysiwyg: 'ckeditor'/wysiwyg: 'trix'/" webpack.config.js
          fi
          yarn install

      - name: Configure Trix if enabled
        if: matrix.trix == true
        run: |
          printf "bit_bag_sylius_cms:\n    wysiwyg_editor: trix\n" >> tests/Application/config/packages/bitbag_sylius_cms_plugin.yaml

      - name: Prepare test application database
        run: |
          (cd tests/Application && bin/console doctrine:database:create -vvv)
          (cd tests/Application && bin/console doctrine:migrations:migrate -n -vvv -q)

      - name: Prepare test application assets
        run: |
          (cd tests/Application && bin/console assets:install public -vvv)
          (cd tests/Application && yarn build:prod)

      - name: Prepare test application cache
        run: (cd tests/Application && bin/console cache:warmup -vvv)

      - name: Load fixtures in test application
        run: (cd tests/Application && bin/console sylius:fixtures:load -n)

      - name: Validate composer.json
        run: composer validate --ansi --strict

      - name: Validate database schema
        run: (cd tests/Application && bin/console doctrine:schema:validate)

      - name: Run PHPSpec
        run: vendor/bin/phpspec run --ansi -f progress --no-interaction

      - name: Run PHPUnit
        run: vendor/bin/phpunit --colors=always

      - name: Set Behat tags
        if: matrix.trix != true
        run: echo "BEHAT_TAGS=--tags='~@wysiwyg'" >> $GITHUB_ENV

      - name: Run Behat
        run: vendor/bin/behat ${{ env.BEHAT_TAGS }} --colors --strict -vvv --no-interaction -f progress || vendor/bin/behat ${{ env.BEHAT_TAGS }} --colors --strict -vvv --no-interaction -f progress --rerun

      - name: Upload Behat logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Behat logs
          path: etc/build/
          if-no-files-found: ignore

#      - name: Failed build Slack notification
#        uses: rtCamp/action-slack-notify@v2
#        if: ${{ failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
#        env:
#          SLACK_CHANNEL: ${{ secrets.FAILED_BUILD_SLACK_CHANNEL }}
#          SLACK_COLOR: ${{ job.status }}
#          SLACK_ICON: https://github.com/rtCamp.png?size=48
#          SLACK_MESSAGE: ':x:'
#          SLACK_TITLE: Failed build on ${{ github.event.repository.name }} repository
#          SLACK_USERNAME: ${{ secrets.FAILED_BUILD_SLACK_USERNAME }}
#          SLACK_WEBHOOK: ${{ secrets.FAILED_BUILD_SLACK_WEBHOOK }}
